#!/usr/bin/fish

########################
# main prompt
########################
function omnirun_prompt
    # kill ffmpeg from previous run, if necessary
    string length $__OMNIRUN_FFMPEG_PID >> /dev/null
    if test $status -eq 0
        kill $__OMNIRUN_FFMPEG_PID
        set -e __OMNIRUN_FFMPEG_PID
    end

    # clear any environment variables from previous runs
    set -e __OMNIRUN_STATE

    # no custom in main prompt
    echo -en "\0no-custom\x1ftrue\n"

    # print main options
    echo "calc"
    echo "clip"
    echo "find"
    echo "run"
end

########################
# calc
########################
function omnirun_prompt_calc
    # the existing rofi-calc plugin (https://github.com/svenstaro/rofi-calc)
    # does a great job at providing calculator functionality.
    setsid -f fish -c 'sleep 0.1 && rofi -show calc -modi calc -no-show-match -no-sort' >> /dev/null & disown
    exit 0
end

########################
# clip
########################
function omnirun_prompt_clip
    echo -en "\0no-custom\x1ftrue\n"
    echo -en "screenshot (full)\0info\x1fclip_screen_full\n"
    echo -en "screenshot (select)\0info\x1fclip_screen_select\n"
    echo -en "record (full)\0info\x1fclip_record_full\n"
    echo -en "record (select)\0info\x1fclip_record_select\n"
    echo -en "gif\0info\x1fclip_gif\n"
end

function omnirun_finish_clip
    switch (string sub -s 6 $ROFI_INFO)
        case "screen_full"
            setsid -f fish -c 'sleep 0.1 && screenshot-clipboard' >> /dev/null & disown
            exit 0
        case "screen_select"
            setsid -f fish -c 'sleep 0.1 && screenshot-clipboard -s' >> /dev/null & disown
            exit 0
        case "record_full"
            setsid -f fish -c 'sleep 0.1 && record-ffmpeg' >> /dev/null & disown
            exit 0
        case "record_select"
            setsid -f fish -c 'sleep 0.1 && record-ffmpeg -select' >> /dev/null & disown
            exit 0
        case "gif"
            setsid -f fish -c 'sleep 0.1 && record-ffmpeg -gif' >> /dev/null & disown
    end
end

########################
# find
########################
function omnirun_prompt_find
    # set prompt state for callback
    set -U __OMNIRUN_STATE find

    # fd exclude patterns
    set _FEX ".cache"
    set _FEX $_FEX ".config/discord"
    set _FEX $_FEX ".config/pulse"
    set _FEX $_FEX ".config/systemd"
    set _FEX $_FEX ".local/share"
    set _FEX $_FEX ".local/state"
    set _FEX $_FEX ".git"
    set _FEX $_FEX ".mozilla"
    set _FEX $_FEX ".pki"
    set _FEX $_FEX ".templateengine"
    set _FEX $_FEX "repos/dotfiles"

    set TEXCLUDE "-H"
    for i in $_FEX
        set TEXCLUDE $TEXCLUDE "-E" $i
    end

    # perform search
    fd . ~ $TEXCLUDE
end

function omnirun_finish_find
    if test -d $argv[1]
        # open directory in fish
        setsid -f kitty -d $argv[1] >> /dev/null & disown
    else
        # open file in specified program
        setsid -f xdg-open $argv[1] >> /dev/null & disown
    end
    exit 0
end

########################
# run
########################
function omnirun_prompt_run
    set RUN_APPS $RUN_APPS "btop/fish/kitty -e btop"
    set RUN_APPS $RUN_APPS "celeste/steam_icon_504230/celeste"
    set RUN_APPS $RUN_APPS "discord/discord/discord"
    set RUN_APPS $RUN_APPS "firefox/firefox/firefox"
    set RUN_APPS $RUN_APPS "kitty/kitty/kitty -e fish"
    set RUN_APPS $RUN_APPS "lonn/love2d/lonn"
    set RUN_APPS $RUN_APPS "neovim/nvim/kitty -e nvim"
    set RUN_APPS $RUN_APPS "obs/com.obsproject.Studio/obs"
    set RUN_APPS $RUN_APPS "ranger/folder/kitty -e ranger ~"
    set RUN_APPS $RUN_APPS "steam/steam/run-steam"

    for app in $RUN_APPS
        set _APP (string split '/' $app)
        echo -en " $_APP[1]\0icon\x1f$_APP[2]\x1finfo\x1frun_$_APP[3]\n"
    end
end

function omnirun_finish_run
    set RUN_CMD (string sub -s 5 $ROFI_INFO)
    setsid -f (string split ' ' $RUN_CMD) >> /dev/null & disown
    exit 0
end

########################
# main prompt loop
########################
switch $ROFI_RETV
    case 0
        # first run
        echo -en "\0prompt\x1fï„  \n"
        omnirun_prompt
    case "*"
        # selected option
        # check to see if we are already in a submenu

        # test __OMNIRUN_STATE
        string length $__OMNIRUN_STATE >> /dev/null
        if test $status -eq 0
            switch $__OMNIRUN_STATE
                case "find"
                    omnirun_finish_find $argv[1]
            end
        end

        # test ROFI_INFO
        string length $ROFI_INFO >> /dev/null
        if test $status -eq 0
            switch (string sub -l 4 $ROFI_INFO)
                case "clip"
                    omnirun_finish_clip
                case "run_"
                    omnirun_finish_run
            end
        else
            switch $argv[1]
                case "calc"
                    omnirun_prompt_calc
                case "clip"
                    omnirun_prompt_clip
                case "find"
                    omnirun_prompt_find
                case "run"
                    omnirun_prompt_run
            end
        end
end
